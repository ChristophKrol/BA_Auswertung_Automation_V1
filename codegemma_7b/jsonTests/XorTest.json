{
    "className": "Xor",
    "testMethods": [
        {
            "methodName": "testConvertToHexWithEmptyInput",
            "code": "@Test\nvoid testConvertToHexWithEmptyInput() {\n assertEquals(\" \", Xor.convertToHex(\"\"));\n}"
        },
        {
            "methodName": "testConvertToHexWithSingleCharacterInput",
            "code": "@Test\nvoid testConvertToHexWithSingleCharacterInput() {\n assertEquals(\"65\", Xor.convertToHex(\"A\"));\n}"
        },
        {
            "methodName": "testConvertToHexWithMultipleCharactersInput",
            "code": "@Test\nvoid testConvertToHexWithMultipleCharactersInput() {\n assertEquals(\"47 65 69 74 65 6D 65 74\", Xor.convertToHex(\"Secret\"));\n}"
        },
        {
            "methodName": "testConvertToHexStringArrayWithEmptyInput",
            "code": "@Test\nvoid testConvertToHexStringArrayWithEmptyInput() {\n assertEquals(new ArrayList<>(), Xor.convertToHexArray(\"\"));\n}"
        },
        {
            "methodName": "testConvertToHexStringArrayWithSingleCharacterInput",
            "code": "@Test\nvoid testConvertToHexStringArrayWithSingleCharacterInput() {\n assertEquals(Arrays.asList(\"41\"), Xor.convertToHexArray(\"A\"));\n}"
        },
        {
            "methodName": "testConvertToHexStringArrayWithMultipleCharactersInput",
            "code": "@Test\nvoid testConvertToHexStringArrayWithMultipleCharactersInput() {\n assertEquals(Arrays.asList(\"47\", \"65\", \"69\", \"74\", \"65\", \"6D\", \"65\", \"74\"), Xor.convertToHexArray(\"Secret\"));\n}"
        },
        {
            "methodName": "testXorEncryptWithEmptyMessageAndKey",
            "code": "@Test\nvoid testXorEncryptWithEmptyMessageAndKey() {\n assertEquals(new ArrayList<>(), Xor.xorEncrypt(\"\", \"\"));\n}"
        },
        {
            "methodName": "testXorEncryptWithSingleCharacterMessageAndKey",
            "code": "@Test\nvoid testXorEncryptWithSingleCharacterMessageAndKey() {\n assertEquals(Arrays.asList(\"24\"), Xor.xorEncrypt(\"A\", \"B\"));\n}"
        },
        {
            "methodName": "testXorEncryptWithMultipleCharactersMessageAndKey",
            "code": "@Test\nvoid testXorEncryptWithMultipleCharactersMessageAndKey() {\n assertEquals(Arrays.asList(\"47\", \"65\", \"69\", \"74\", \"65\", \"6D\", \"65\", \"74\"), Xor.xorEncrypt(\"Secret\", \"Secret\"));\n}"
        },
        {
            "methodName": "testXorDecryptWithEmptyEncryptedMessageAndKey",
            "code": "@Test\nvoid testXorDecryptWithEmptyEncryptedMessageAndKey() {\n assertEquals(\"\", Xor.xorDecrypt(new ArrayList<>(), new ArrayList<>()));\n}"
        },
        {
            "methodName": "testXorDecryptWithSingleCharacterEncryptedMessageAndKey",
            "code": "@Test\nvoid testXorDecryptWithSingleCharacterEncryptedMessageAndKey() {\n assertEquals(\"B\", Xor.xorDecrypt(Arrays.asList(\"24\"), Arrays.asList(\"B\", \"A\")));\n}"
        },
        {
            "methodName": "testXorDecryptWithMultipleCharactersEncryptedMessageAndKey",
            "code": "@Test\nvoid testXorDecryptWithMultipleCharactersEncryptedMessageAndKey() {\n assertEquals(\"Secret\", Xor.xorDecrypt(Arrays.asList(\"47\", \"65\", \"69\", \"74\", \"65\", \"6D\", \"65\", \"74\"), Arrays.asList(\"Secret\", \"Secret\")));\n}"
        },
        {
            "methodName": "testCreateKeyWithEmptyMessageAndKey",
            "code": "@Test\nvoid testCreateKeyWithEmptyMessageAndKey() {\n assertEquals(new ArrayList<>(), Xor.createKey(new ArrayList<>(), new ArrayList<>()));\n}"
        },
        {
            "methodName": "testCreateKeyWithSingleCharacterMessageAndKey",
            "code": "@Test\nvoid testCreateKeyWithSingleCharacterMessageAndKey() {\n assertEquals(Arrays.asList(\"secret\"), Xor.createKey(Arrays.asList(\"A\"), Arrays.asList(\"secret\")));\n}"
        },
        {
            "methodName": "testCreateKeyWithMultipleCharactersMessageAndKey",
            "code": "@Test\nvoid testCreateKeyWithMultipleCharactersMessageAndKey() {\n assertEquals(Arrays.asList(\"secret\", \"secret\", \"secret\", \"secret\", \"secret\", \"secret\", \"secret\", \"secret\"), Xor.createKey(Arrays.asList(\"Secret\", \"Secret\", \"Secret\", \"Secret\", \"Secret\", \"Secret\", \"Secret\", \"Secret\"), Arrays.asList(\"secret\", \"secret\", \"secret\", \"secret\", \"secret\", \"secret\", \"secret\", \"secret\")));\n}"
        }
    ]
}